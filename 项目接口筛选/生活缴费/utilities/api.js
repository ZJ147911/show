exports.API = [
	{
		name: "queryArea",
		urlSuffix: "getBusiCities",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/queryArea.json",
	},
	{
		name: "queryOrgList",
		urlSuffix: "getOrgsByBusiType",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/queryOrgList.json",
	},
	{
		name: "queryOrg",
		urlSuffix: "getOrgByOrgCode",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/queryOrg.json",
	},
	{
		name: "queryBill",
		urlSuffix: "livelihood/public/queryOwnBill",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		gapiStr: "sharebillsAgreeId",
		needEncryptInterfaceArrUpAndDown: true,
		hasResultWrap: true,
	},
	{
		name: "queryOrder",
		urlSuffix: "livelihood/public/order",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/order.json",
		gapiStr: "sharebillsAgreeId",
		needEncryptInterfaceArrUpAndDown: true,
		hasResultWrap: true,
	},
	{
		name: "sendCode",
		urlSuffix: "sendAuthCode",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/sendCode.json",
	},
	{
		name: "checkCode",
		urlSuffix: "checkAuthCode",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/checkCode.json",
	},
	{
		name: "getCaptcha",
		urlSuffix: "getCaptcha",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/getCaptcha.json",
	},
	{
		name: "queryHistoryBill",
		urlSuffix: "queryBillAcctNo",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/queryBillAcctNo.json",
	},
	{
		name: "history",
		urlSuffix: "queryBillTxnInfo",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		mockUrl: "mockdata/payhistory.json",
	},
	{ name: "sgccPreQuery", urlSuffix: "sgccPreQuery", method: "POST", initialParam: {}, response: {}, isMock: false },
	{
		name: "sgccBindAcctNO",
		urlSuffix: "sgccBindAcctNO",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
	},
	{
		name: "queryRealNameStatus",
		urlSuffix: "roulette/externalservice/queryRealNameStatus",
		method: "POST",
		initialParam: {},
		response: {},
		isMock: false,
		gapiStr: "queryRealAgreeId",
	},
]
